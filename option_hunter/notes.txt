Setup Python & Webdriver
    install anaconda python
    install package selenium via conda
        ## sudo -u <user> -i
        %% which conda
        %% conda install selenium
    install package pickledb via pip
        %% which pip
        %% pip install pickledb
    download chromedriver; look at which chrome version it supports
    to get webdriver working in WSL:
        -- use Windows version of Chromedriver
        -- copy to /usr/local/bin/

Setup Django
    install virtualenv
        -- virtual env where software & python packages are installed in a contained space
        %% conda install virtualenv
    create Django environment
        %% virtualenv env
        %% . env/bin/activate
    install Django within the environment
        %% pip install django
        %% django-admin --version


Django
    model-template-view (MTV) pattern, or on Django the model-view-controller (MVC):
        -- model is the single definitive source of data
        -- view describes the data via a python callback function to a specific URL
        -- template is how Django generates HTML dynamically

Create a Django project/app
    start the project
        %% django-admin startproject testsite
        -- settings.py describes configuration of Django installation
        -- urls.py contains a urlpatterns list, that routes and maps URLs to their views
        -- wsgi.py contains the configuration for the web server gateway interface.
    start the website
        %% python manage.py runserver 192.168.1.22:8000
    start an app
        %% python manage.py startapp polls
        -- this creates a directory that will house the poll application
        -- create a view, map it to a URL and point the root URLconf at the polls.urls

Database w/ Django
    "migrate"
        -- create the tables in the database for applications listed in settings.py
        %% python manage.py migrate
    create models
        -- define models, i.e. the datebase layout w/ additional metadata
        -- django can create a database schema & a python database-access API
    activate models
        -- to include the app in the project, add a reference to its configuration class in settings.py
        %% python manage.py makemigrations polls
        %% python manage.py migrate
    play w/ API in a python shell
        %% python manage.py shell
        >> from polls.models import Choice,Question
        >> Question.objects.all()
        >> from django.utils import timezone
        >> q = Question(question_text="what is new?", pub_date=timezone.now())
        >> q.save()   # explicitly save the object into database
        >> q.id
        >> q.question_text
        >> Question.objects.all()
        >> Question.objects.filter(id=1)
        >> Question.objects.filter(question_text__startswith='what')
        >> Question.objects.filter(pub_date__year=timezone.now().year)
        >> q = Question.objects.get(pk=1)
        >> q.choice_set.all()
        >> q.choice_set().create(choice_text='not much', votes=0)
        >> c = q.choice_set.create(choice_set='just hacking again', votes=0)
        >> c.question

